#!/usr/bin/perl -w

use strict;
use utf8;
use Text::ParseWords;
use Getopt::Long;

################################################################
# Parameter definitons
################################################################
my $debug = 0;
my ($help, $version, $type, $protocol);
my (%u_dsattr, %g_dsattr);

################################################################
# Attribute type difinition list
################################################################
%u_dsattr = (
  # AttributeKey                # Value
    FirstName => "",            # OD
    LastName  => "",            # User02
    RecordName  => "",          # oduser02
    Password  => "",            # ********
    UserShell  => "/bin/bash",  # /bin/bash
    UniqueID  => "",            # 1002
    NFSHomeDirectory  => "",    # /Network/Servers/pms01.vmnet3.com/Volumes/Macintosh HD/Shared/smb-homes/oduser02
    HomeDirectoryQuota  => "",  # 1000000000
    EMailAddress  => "",        # oduser02@xmini2.vmnet3.local
    Comment  => "",             # oduser02 note
    Keywords  => "",            # oduser
    PrimaryGroupID  => 20,      # 20
    RealName => "",             # OD User02
    HomeDirectory => "",        # <home_dir><url>smb\://pms01.vmnet3.com/smb-homes</url><path>oduser02</path></home_dir>
);

%g_dsattr = (
    "RecordName" => "",
    "PrimaryGroupID" => "",
    "GroupMembership" => "",
);

GetOptions (
    "help!"		=> \$help,
    "debug!"	=> \$debug,
    "type:s"    => \$type,
    "proto:s"   => \$protocol,
);

$type = "user";

# Show help
if ($help){
    &usage();
    exit;
}

## Output into STDOUT
# Print definition line.
if ( $type == "user" ){
   &print_define(%u_dsattr);
#}else{
#   &print_define($type,%g_dsattr);
}


__END__
# Print entries.
if ( $Request eq "Groups" ){
    &print_grouprecord(@dsattr);
}else{
    if ( defined $UseGroupSubDir ){
    $UseGroupSubDir = "on";
    }else{
    $UseGroupSubDir = "/";
    }
    &print_userrecord($debug, $Home_via_NFS, $UseGroupSubDir, $smbdrivelabel, $smblogonscript, @dsattr);
}

exit;

sub print_userrecord(){
# mksample.pl
# 0        1          2        3   4         5
# RealName,RecordName,password,UID,2nd Group,2nd GID,
# 6           7         8     9		 10
# home server,home root,shell,Disk Quota,
#Sample User01,sample01,passwd,9001,samples,9000,homesrv_fqdn,homedir_root,/pathto/shell,524288000

    my (	$quote_sw, @items, %dsAttr, $userinfo, $SharePoint,
    $SubDir, $path, $homehost, $homehostfqdn, $DEBUG,
    $homeroot, @attr, $i, $drivelabel, $logonscript,
    $NFS_HOME, $myouji, $oname,
    );

    $quote_sw                 = 1;
    $dsAttr{"AuthMethod"}     = "dsAuthMethodStandard\\:dsAuthClearText";
    $dsAttr{"PrimaryGroupID"} = "20";	# Group "staff"

    ($DEBUG, $NFS_HOME, $SubDir, $drivelabel, $logonscript, @attr ) = @_ ; # SubDir MUST be "/" or "on"

    while(<>){
    chomp;
 		s/,$//;

    next if /^\s*$/;
    next if /^\s*\#/;
    next if /^,,,/;

    @items = &trim ( quotewords( "," ,$quote_sw, $_ ) ) ;

    $dsAttr{"RealName"}		= $items[0];
    ($myouji, $oname) = split(/ /,$dsAttr{"RealName"});
    $dsAttr{"LastName"}	= "$myouji";
    $dsAttr{"FirstName"}	= "$oname";



    $dsAttr{"RecordName"}   	= lc $items[1];
    $dsAttr{"Password"}		= $items[2];

    if ( $items[3] =~ /^[0-9]*$/ ){
    $dsAttr{"UniqueID"}		= $items[3] + 0;
    }else{
    next;
    }

    $dsAttr{"SecondGroup"}		= lc $items[4];
    if ( $SubDir eq "/" ){
    $path = $dsAttr{"RecordName"};
    }else{
    $path = join ("/", $dsAttr{"SecondGroup"},
     $dsAttr{"RecordName"});
    }
    if ( defined $items[6] ){
    ($homehost, $homehostfqdn) = &get_hostname($items[6]);
    }else{
    next;
    }

    if ( defined $items[8] ){
    $dsAttr{"UserShell"}		= lc $items[8];
    }else{
    $dsAttr{"UserShell"} = "/dev/null";
    }
    if ( defined $items[9] ){
    $DiskQuotaSize = &cnv2byte($items[9]);
    $dsAttr{"HomeDirectoryQuota"} = $DiskQuotaSize;
    $dsAttr{"HomeDirectoryQuota"} = ""
     if ( $DiskQuotaSize == -1 );
    }else{
    $dsAttr{"HomeDirectoryQuota"} = ""
    }


    ( $dsAttr{"SMBProfilePath"},
      $dsAttr{"SMBScriptPath"},
      $dsAttr{"SMBHomeDrive"},
      $dsAttr{"SMBHome"}) = &smbhomeset($dsAttr{"RecordName"},
        $homehost,
        $drivelabel,
        $logonscript );

    $homeroot = `basename $items[7]`;
    chomp $homeroot;

    $dsAttr{"NFSHomeDirectory"} = join ("",
    "/Network/Servers/",
    $homehostfqdn,
    $items[7],
    "/",
    $path);

    $dsAttr{"HomeDirectory"} = join ( "",
    "<home_dir><url>afp\\://",
    $homehostfqdn,
    "/",
    $homeroot,
    "</url>",
    "<path>$path</path></home_dir>",
    );
    $dsAttr{"MailAttribute"} = "";
    $dsAttr{"EMailAddress"}	= "";
    $dsAttr{"MCXFlags"} = &mkmcxflags();

                ####################################################
                # Drop AFP network home Attributes for NFS mounted home
                ####################################################
                if ( $NFS_HOME ){
                        $dsAttr{"HomeDirectory"} = "";
                        $path = "";
                }

    if ( $DEBUG ){
    print "#_______________________________________________\n";
    print "#DEBUG: Realname   : $dsAttr{RealName}\n";
    print "#DEBUG: RecordName : $dsAttr{RecordName}\n";
    print "#DEBUG: FirstName : $dsAttr{FirstName}\n";
    print "#DEBUG: LastName : $dsAttr{LastName}\n";
    print "#DEBUG: Password   : $dsAttr{Password}\n";
    print "#DEBUG: UniqueID   : $dsAttr{UniqueID}\n";
    print "#DEBUG: SecondGroup: $dsAttr{SecondGroup}\n";
    print "#DEBUG: HomeDir    : $dsAttr{HomeDirectory}\n";
    print "#DEBUG: path       : $path\n";
    print "#DEBUG: NFSHOME    : $dsAttr{NFSHomeDirectory}\n";
    print "#DEBUG: hostname   : $homehost\n";
    print "#DEBUG: fqdn       : $homehostfqdn\n";
    print "#DEBUG: Shell      : $dsAttr{UserShell}\n";
    print "#DEBUG: Quota      : $dsAttr{HomeDirectoryQuota}\n";
    print "#DEBUG: SMBProfile : $dsAttr{SMBProfilePath}\n";
    print "#DEBUG: SMBDrive   : $dsAttr{SMBHomeDrive}\n";
    print "#DEBUG: SMBhome    : $dsAttr{SMBHome}\n";
    print "#DEBUG: SMBlogon   : $dsAttr{SMBScriptPath}\n";
    print "#DEBUG: EMailAddress   : $dsAttr{EMailAddress}\n";
    print "#_______________________________________________\n";
    }


    for ( $i = 0; $i <= $#attr ;$i++){
    print ":" if ( $i != 0 );
    print "$dsAttr{$attr[$i]}";
    }
    print "\n";
    }
}

sub smbhomeset (){
    my ($profile, $label, $home, $script, $homesrv, $user);
    ($user, $homesrv, $label, $script) = @_;

    $script  = "" if ( $script eq "none" );
    if ( $label eq "none"){
    $label   = "";
    $profile = "";
    $script  = "";
    $home    = "";
    }else{
    $label = uc $label;
    $label = $label . "\\:" unless ( $label =~ /:$/ );

    $home = "\\\\\\\\" . lc $homesrv . "\\\\"  . lc $user;
    $profile = $home . "\\\\" . "Library\\\\Windows_profiles";
    }
    return ($profile, $script, $label, $home );
}

sub cnv2byte(){
    my ($input) = @_;
    my $result = -1;

    chomp $input; $input = lc $input;

    $result = $input 			if ($input =~ /^[0-9]*$/   );
    $result = $1 * 1024 			if ($input =~ /^([0-9]*)k$/ );
    $result = $1 * 1024 * 1024 		if ($input =~ /^([0-9]*)m$/ );
    $result = $1 * 1024 * 1024 * 1024 	if ($input =~ /^([0-9]*)g$/ );

    return $result;
}

sub mkmcxflags(){
    my $mcx;

    $mcx = join ( "",  "<?xml version =\"1.0\" encoding=\"UTF-8\"?>",
     "<!DOCTYPE plist PUBLIC \"-//Apple ",
     "Computer//DTD PLIST 1.0//EN\" ",
     "\"http\\://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
     "<plist version=\"1.0\"><dict>",
     "<key>simultaneous_login_enabled</key>",
     "<false/>" ,
     "</dict></plist>"
    );
    return $mcx;
}

sub print_grouprecord(){
    my (	$quote_sw, @items, %groups, %groupmember,
    $group, @attr, %dsAttr, $i,
    );
    $quote_sw = 1;
    @attr = @_;

    while(<>){
    chomp;
    next if /^\s*$/;
    next if /^\s*\#/;
    @items = &trim ( quotewords( "," ,$quote_sw, $_ ) ) ;
    $items[1] = lc $items[1]; # This is RecordName
    $items[4] = lc $items[4]; # This is WorkGroup
    push ( @{ $groupmember{$items[4]} }, $items[1]);
    $groups{ $items[4] } =  $items[5]; # This is GID
    }

    foreach $group (keys %groups){
    $dsAttr{RecordName} = $group;
    $dsAttr{GroupMembership} = join (",", @{$groupmember{$group}});
    $dsAttr{PrimaryGroupID} = $groups{$group};

    for ( $i = 0; $i <= $#attr ;$i++){
    print ":" if ( $i != 0 );
    print "$dsAttr{$attr[$i]}";
    }
    print "\n";
    }
}

sub trim (){
    my @out = @_;
    for (@out) { s/^\s+// ; s/\s+$// ; }
    return wantarray ? @out : $out[0];
}

sub print_define(){
    my (%uattr, @separaters, $type, $request_type, $i);

    ($request_type, %uattr) = @_;

    @separaters = ( "0x0A","0x5C","0x3A","0x2C" );
    $type = "dsRecTypeStandard:$request_type";
    for ( $i = 0; $i <= $#uattr; $i++ ) {
    $uattr[$i] = "dsAttrTypeStandard:$uattr[$i]";
    }

    print ( join (' ', @separaters, $type, ($#uattr + 1), @uattr), "\n");
}

sub get_hostname(){
    my $h;
    my $fqdn;
    my @dc;
    my $host;

    ($h) = @_;
    $h = lc $h;
    if ( $h =~ /\S.\.\S./ ){
    $fqdn = $h;
    ($host, @dc) = split(/\./,$fqdn);
    }else{
    $host = $h;
    $fqdn = `hostname`;
    if ($fqdn =~ /^[a-z0-9-_].(\.\S.)/) {
    $fqdn = $h . $1 ;
    }else{
    $fqdn = $h;
    }
    }
    return ( $host, $fqdn);
}

sub usage(){
    my $myf = `/usr/bin/basename $0`;
    chomp $myf;
        print <<__USE__

#####################################
              U S A G E
#####################################

Hi $ENV{USER}.

$myf reads a cvsfile ( or stdin ) which contains user list by csv file format and then output converted list into standerd out. If you add option --smbdrive following single charactor, $myf add information for SMB home directory for each users. If you add option --subdir, user's home are grouped by thier workgroup.  If you provide user homes via NFS, you must use option --nfs or user homes will fail to mount.
Option --group outputs converted file for group import.
Option --help will show this message.
Option --version will show version of this script.

csvfile must be like that,
Sample User01,sample01,passwd,9001,samples,9000,homehostname.domain.net,/Volumes/RAID5HD/Users/home,/bin/bash,500m


examples)
   $myf /path/to/csvfile
   $myf --subdir /path/to/csvfile
   $myf --nfs --subdir /path/to/csvfile
   $myf --subdir --smbdrive Z  /path/to/csvfile
   $myf --smbdrive H  --smblogon logon.bat /path/to/csvfile
   $myf --group /path/to/csvfile
   $myf --help --version

Thanks.

__USE__
}
__END__
